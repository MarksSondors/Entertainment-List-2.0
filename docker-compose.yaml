version: '3.8'

services:
  web:
    build:
      context: ./entertainment
      dockerfile: Dockerfile
    volumes:
      - ./entertainment:/app
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.entertainment.rule=Host(`localhost`)"  # Change to your domain in production
      - "traefik.http.services.entertainment.loadbalancer.server.port=8000"
    networks:
      - webnet
    restart: unless-stopped

  postgres:
    image: postgres:16-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    networks:
      - webnet
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: "redis:alpine"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - webnet
    restart: unless-stopped

  traefik:
    image: "traefik:v3.3.5"
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.file.filename=/etc/traefik/dynamic_conf.yml"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "443:443"  # HTTPS
      - "8080:8080"  # Traefik dashboard
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - ./traefik/acme.json:/acme.json
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml
      - ./traefik/dynamic_conf.yml:/etc/traefik/dynamic_conf.yml
    networks:
      - webnet
    restart: unless-stopped
    
  watchtower:
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --interval 86400 --cleanup  # Check for updates once per day
    environment:
      - TZ=UTC
    networks:
      - webnet
    restart: unless-stopped

networks:
  webnet:
    driver: bridge

volumes:
  redis_data:
  postgres_data: